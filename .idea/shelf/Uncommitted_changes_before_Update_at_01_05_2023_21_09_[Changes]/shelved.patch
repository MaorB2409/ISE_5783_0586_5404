Index: src/geometries/Sphere.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package geometries;\r\n\r\nimport primitives.Point;\r\nimport primitives.Ray;\r\nimport primitives.Vector;\r\nimport java.util.List;\r\n\r\nimport static java.lang.Math.sqrt;\r\nimport static primitives.Util.*;\r\n\r\n\r\n/**\r\n * Sphere class that extends RadialGeometry and includes a center point and radius\r\n */\r\npublic class Sphere extends RadialGeometry{\r\n    final private Point center;\r\n    final private double radius;\r\n    final private double radiusSquared;\r\n\r\n    /**\r\n     * Constructor for sphere that receives center and radius\r\n     *\r\n     * @param center center point\r\n     * @param radius radius value\r\n     */\r\n    public Sphere(Point center, double radius) {\r\n        super(radius);\r\n        this.center = center;\r\n        this.radius = radius;\r\n        this.radiusSquared = radius * radius;\r\n    }\r\n\r\n    /**\r\n     * function that returns center of sphere\r\n     *\r\n     * @return center of sphere\r\n     */\r\n\r\n    public Point getCenter() {\r\n        return center;\r\n    }\r\n\r\n    /**\r\n     * function that returns radius\r\n     *\r\n     * @return radius\r\n     */\r\n    public double getRadius() {\r\n        return radius;\r\n    }\r\n\r\n    @Override\r\n    public Vector getNormal(Point p0) {\r\n        return p0.subtract(center).normalize();\r\n    }\r\n\r\n    /**\r\n     * method calculates a list of Points that a ray from the light source to the object intersects\r\n     * @param ray ray\r\n     * @return returns a list of Points between the geometry and the light source\r\n     */\r\n    @Override\r\n    public List<Point> findIntersections(Ray ray) {\r\n        Vector pointToCenter;\r\n        try {\r\n            pointToCenter = center.subtract(ray.getP0());\r\n        } catch (IllegalArgumentException ignore) {\r\n            return List.of(ray.getPoint(radius));\r\n        }\r\n\r\n        double tm = pointToCenter.dotProduct(ray.getDir());\r\n        double distanceFromCenterSquared = pointToCenter.dotProduct(pointToCenter) - tm * tm;\r\n        double thSquared = radiusSquared - distanceFromCenterSquared;\r\n        //check that ray crosses area of sphere, if not then return null\r\n        if (alignZero(thSquared) <= 0) return null;\r\n\r\n        double th = sqrt(thSquared);\r\n        double secondDistance = tm + th;\r\n        //when the distance is not positive return null\r\n        if (alignZero(secondDistance) <= 0) return null;\r\n        double firstDistance = tm - th;\r\n        Point gp2 = ray.getPoint(secondDistance);\r\n        return firstDistance <= 0 ? List.of(gp2) : List.of((ray.getPoint(firstDistance)), gp2);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/geometries/Sphere.java b/src/geometries/Sphere.java
--- a/src/geometries/Sphere.java	(revision 46ff68b0a570fda675fb8207047c05fd386d4a90)
+++ b/src/geometries/Sphere.java	(date 1682881347229)
@@ -4,6 +4,7 @@
 import primitives.Ray;
 import primitives.Vector;
 import java.util.List;
+import java.util.Objects;
 
 import static java.lang.Math.sqrt;
 import static primitives.Util.*;
@@ -54,6 +55,28 @@
         return p0.subtract(center).normalize();
     }
 
+
+
+    @Override
+    public String toString() {
+        return "Sphere{" +
+                "center=" + center +
+                ",radius=" + radius +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Sphere sphere = (Sphere) o;
+        return Double.compare(sphere.radius, this.radius) == 0 && this.center.equals(sphere.center);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(this.center, this.radius);
+    }
     /**
      * method calculates a list of Points that a ray from the light source to the object intersects
      * @param ray ray
Index: unitTests/geometries/SphereTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package geometries;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport primitives.Point;\r\nimport primitives.Ray;\r\nimport primitives.Vector;\r\n\r\nimport java.util.List;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass SphereTest {\r\n    /**\r\n     * Test method for {@link geometries.Sphere#getNormal(primitives.Point)}.\r\n     */\r\n    @Test\r\n    void testGetNormal() {\r\n        // Equivalence Partitions tests ======================================================================\r\n        // EP01 get normal of point on sphere\r\n        Sphere s1 = new Sphere (new Point(0,0,0), 1);\r\n        Vector normal = new Vector(1,0,0);\r\n        assertEquals(normal, s1.getNormal(new Point(1,0,0)), \"Bad normal for sphere\");\r\n    }\r\n\r\n\r\n//    /**\r\n//     * Test method for {@link geometries.Sphere#findIntersections(Ray)} (primitives.Point)}.\r\n//     */\r\n//    @Test\r\n//    public void testFindIntersections() {\r\n//        Sphere sphere = new Sphere(new Point(2,0,0),1);\r\n//        Point pnt1 = new Point(1.1339745962156,0.5,0);\r\n//        Point pnt2 = new Point(2.8660254037844,0.5,0);\r\n//\r\n//\r\n//\r\n//        //============ Equivalence Partitions Tests ==============//\r\n//\r\n//        //EP1: Head of the ray is outside the sphere and intersects the sphere twice\r\n//        assertEquals(2, sphere.findIntersections(new Ray(new Point(0, 0.5, 0), new Vector(1, 0, 0))).size(), \"EP1: Wrong number of points - 2\");\r\n//        assertEquals(List.of(pnt1,pnt2), sphere.findIntersections(new Ray(new Point(0, 0.5, 0), new Vector(1, 0, 0))), \"EP1: Wrong intersections\");\r\n//        //EP2: Ray doesn't intersect the sphere\r\n//        assertNull(sphere.findIntersections(new Ray(new Point(0, 2, 0), new Vector(1, 0, 0))),\"EP2: Ray's line out of sphere\");\r\n//        //EP3: Ray starts inside the sphere\r\n//        assertEquals(1, sphere.findIntersections(new Ray(new Point(1.5, 0.5, 0), new Vector(1, 0, 0))).size(), \"EP3: Wrong number of points - 1\");\r\n//        assertEquals(List.of(pnt1), sphere.findIntersections(new Ray(new Point(1.5, 0.5, 0), new Vector(-1, 0, 0))), \"EP3: Wrong intersection\");\r\n//\r\n//        //EP4: Ray starts after the sphere\r\n//        assertNull(sphere.findIntersections(new Ray(new Point(3, 0.5, 0), new Vector(1, 0, 0))),\"EP4: Ray starts after the sphere\");\r\n//\r\n//        //============ Boundary Tests ==============//\r\n//\r\n//        // **** Group: Ray's line crosses the sphere (but not the center)\r\n//\r\n//\r\n//        //BVA1: Ray starts at the sphere and goes inside\r\n//        assertEquals(1, sphere.findIntersections(new Ray(pnt1, new Vector(1, 0, 0))).size(), \"BVA1: Wrong number of points - 1\");\r\n//        assertEquals(List.of(pnt2), sphere.findIntersections(new Ray(pnt1, new Vector(1, 0, 0))), \"BVA1: Wrong intersection\");\r\n//        //BVA2: Ray starts at the sphere and goes outside\r\n//        assertNull(sphere.findIntersections(new Ray(pnt1, new Vector(-1, 0, 0))),\"BVA2: Ray's line out of sphere\");\r\n//\r\n//        // **** Group: Ray's line goes through the center\r\n//\r\n//\r\n//        //BVA3: Ray starts before the sphere\r\n//        assertEquals(2, sphere.findIntersections(new Ray(new Point(0.5, 0, 0), new Vector(1, 0, 0))).size(), \"BVA3: Wrong number of points - 2\");\r\n//        assertEquals(List.of(new Point(1,0,0),new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(0.5, 0, 0), new Vector(1, 0, 0))), \"BVA3: Wrong intersections\");\r\n//        //BVA4: Ray starts at sphere and goes inside\r\n//        assertEquals(1, sphere.findIntersections(new Ray(new Point(1, 0, 0), new Vector(1, 0, 0))).size(), \"BVA4: Wrong number of points - 1\");\r\n//        assertEquals(List.of(new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(1, 0, 0), new Vector(1, 0, 0))), \"BVA4: Wrong intersection\");\r\n//        //BVA5: Ray starts at the sphere and goes outside\r\n//        assertNull(sphere.findIntersections(new Ray(new Point(1,0,0), new Vector(-1, 0, 0))),\"BVA5: Ray's line out of sphere\");\r\n//        //BVA6: Ray starts inside the sphere before the center\r\n//        assertEquals(1, sphere.findIntersections(new Ray(new Point(1.5, 0, 0), new Vector(1, 0, 0))).size(), \"BVA6: Wrong number of points - 1\");\r\n//        assertEquals(List.of(new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(1.5, 0, 0), new Vector(1, 0, 0))), \"BVA6: Wrong intersection\");\r\n//        //BVA7: Ray starts inside the sphere after the center\r\n//        assertEquals(1, sphere.findIntersections(new Ray(new Point(2.5, 0, 0), new Vector(1, 0, 0))).size(), \"BVA7: Wrong number of points - 1\");\r\n//        assertEquals(List.of(new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(2.5, 0, 0), new Vector(1, 0, 0))), \"BVA7: Wrong intersection\");\r\n//        //BVA8: Ray starts at the center\r\n//        assertEquals(1, sphere.findIntersections(new Ray(new Point(2, 0, 0), new Vector(1, 0, 0))).size(), \"BVA8: Wrong number of points - 1\");\r\n//        assertEquals(List.of(new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(2, 0, 0), new Vector(1, 0, 0))), \"BVA8: Wrong intersection\");\r\n//        //BVA9: Ray starts after the sphere\r\n//        assertNull(sphere.findIntersections(new Ray(new Point(4,0,0), new Vector(1, 0, 0))),\"BVA9: Ray's line inside of sphere\");\r\n//\r\n//        // **** Group: Ray's line is tangent to the sphere\r\n//\r\n//        //BVA10: Ray starts before the tangent point\r\n//        assertNull(sphere.findIntersections(new Ray(new Point(0,1,0), new Vector(1, 0, 0))),\"BVA10: Ray starts before the tangent point\");\r\n//        //BVA11: Ray starts at the tangent point\r\n//        assertNull(sphere.findIntersections(new Ray(new Point(2,1,0), new Vector(1, 0, 0))),\"BVA11: Ray starts at the tangent point\");\r\n//        //BVA12: Ray starts after the tangent point\r\n//        assertNull(sphere.findIntersections(new Ray(new Point(3,1,0), new Vector(1, 0, 0))),\"BVA12: Ray starts after the tangent point\");\r\n//\r\n//        // **** Group: Special cases\r\n//\r\n//        //BVA13: Ray's line is outside, ray is orthogonal to ray start to sphere's center line\r\n//        assertNull(sphere.findIntersections(new Ray(new Point(0,1,0), new Vector(0, 1, 0))),\"BVA13: Ray's line is outside, ray is orthogonal to ray start to sphere's center line\");\r\n//\r\n//\r\n//    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unitTests/geometries/SphereTest.java b/unitTests/geometries/SphereTest.java
--- a/unitTests/geometries/SphereTest.java	(revision 46ff68b0a570fda675fb8207047c05fd386d4a90)
+++ b/unitTests/geometries/SphereTest.java	(date 1682881347242)
@@ -23,80 +23,80 @@
     }
 
 
-//    /**
-//     * Test method for {@link geometries.Sphere#findIntersections(Ray)} (primitives.Point)}.
-//     */
-//    @Test
-//    public void testFindIntersections() {
-//        Sphere sphere = new Sphere(new Point(2,0,0),1);
-//        Point pnt1 = new Point(1.1339745962156,0.5,0);
-//        Point pnt2 = new Point(2.8660254037844,0.5,0);
-//
-//
-//
-//        //============ Equivalence Partitions Tests ==============//
-//
-//        //EP1: Head of the ray is outside the sphere and intersects the sphere twice
-//        assertEquals(2, sphere.findIntersections(new Ray(new Point(0, 0.5, 0), new Vector(1, 0, 0))).size(), "EP1: Wrong number of points - 2");
-//        assertEquals(List.of(pnt1,pnt2), sphere.findIntersections(new Ray(new Point(0, 0.5, 0), new Vector(1, 0, 0))), "EP1: Wrong intersections");
-//        //EP2: Ray doesn't intersect the sphere
-//        assertNull(sphere.findIntersections(new Ray(new Point(0, 2, 0), new Vector(1, 0, 0))),"EP2: Ray's line out of sphere");
-//        //EP3: Ray starts inside the sphere
-//        assertEquals(1, sphere.findIntersections(new Ray(new Point(1.5, 0.5, 0), new Vector(1, 0, 0))).size(), "EP3: Wrong number of points - 1");
-//        assertEquals(List.of(pnt1), sphere.findIntersections(new Ray(new Point(1.5, 0.5, 0), new Vector(-1, 0, 0))), "EP3: Wrong intersection");
-//
-//        //EP4: Ray starts after the sphere
-//        assertNull(sphere.findIntersections(new Ray(new Point(3, 0.5, 0), new Vector(1, 0, 0))),"EP4: Ray starts after the sphere");
-//
-//        //============ Boundary Tests ==============//
-//
-//        // **** Group: Ray's line crosses the sphere (but not the center)
-//
-//
-//        //BVA1: Ray starts at the sphere and goes inside
-//        assertEquals(1, sphere.findIntersections(new Ray(pnt1, new Vector(1, 0, 0))).size(), "BVA1: Wrong number of points - 1");
-//        assertEquals(List.of(pnt2), sphere.findIntersections(new Ray(pnt1, new Vector(1, 0, 0))), "BVA1: Wrong intersection");
-//        //BVA2: Ray starts at the sphere and goes outside
-//        assertNull(sphere.findIntersections(new Ray(pnt1, new Vector(-1, 0, 0))),"BVA2: Ray's line out of sphere");
-//
-//        // **** Group: Ray's line goes through the center
-//
-//
-//        //BVA3: Ray starts before the sphere
-//        assertEquals(2, sphere.findIntersections(new Ray(new Point(0.5, 0, 0), new Vector(1, 0, 0))).size(), "BVA3: Wrong number of points - 2");
-//        assertEquals(List.of(new Point(1,0,0),new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(0.5, 0, 0), new Vector(1, 0, 0))), "BVA3: Wrong intersections");
-//        //BVA4: Ray starts at sphere and goes inside
-//        assertEquals(1, sphere.findIntersections(new Ray(new Point(1, 0, 0), new Vector(1, 0, 0))).size(), "BVA4: Wrong number of points - 1");
-//        assertEquals(List.of(new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(1, 0, 0), new Vector(1, 0, 0))), "BVA4: Wrong intersection");
-//        //BVA5: Ray starts at the sphere and goes outside
-//        assertNull(sphere.findIntersections(new Ray(new Point(1,0,0), new Vector(-1, 0, 0))),"BVA5: Ray's line out of sphere");
-//        //BVA6: Ray starts inside the sphere before the center
-//        assertEquals(1, sphere.findIntersections(new Ray(new Point(1.5, 0, 0), new Vector(1, 0, 0))).size(), "BVA6: Wrong number of points - 1");
-//        assertEquals(List.of(new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(1.5, 0, 0), new Vector(1, 0, 0))), "BVA6: Wrong intersection");
-//        //BVA7: Ray starts inside the sphere after the center
-//        assertEquals(1, sphere.findIntersections(new Ray(new Point(2.5, 0, 0), new Vector(1, 0, 0))).size(), "BVA7: Wrong number of points - 1");
-//        assertEquals(List.of(new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(2.5, 0, 0), new Vector(1, 0, 0))), "BVA7: Wrong intersection");
-//        //BVA8: Ray starts at the center
-//        assertEquals(1, sphere.findIntersections(new Ray(new Point(2, 0, 0), new Vector(1, 0, 0))).size(), "BVA8: Wrong number of points - 1");
-//        assertEquals(List.of(new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(2, 0, 0), new Vector(1, 0, 0))), "BVA8: Wrong intersection");
-//        //BVA9: Ray starts after the sphere
-//        assertNull(sphere.findIntersections(new Ray(new Point(4,0,0), new Vector(1, 0, 0))),"BVA9: Ray's line inside of sphere");
-//
-//        // **** Group: Ray's line is tangent to the sphere
-//
-//        //BVA10: Ray starts before the tangent point
-//        assertNull(sphere.findIntersections(new Ray(new Point(0,1,0), new Vector(1, 0, 0))),"BVA10: Ray starts before the tangent point");
-//        //BVA11: Ray starts at the tangent point
-//        assertNull(sphere.findIntersections(new Ray(new Point(2,1,0), new Vector(1, 0, 0))),"BVA11: Ray starts at the tangent point");
-//        //BVA12: Ray starts after the tangent point
-//        assertNull(sphere.findIntersections(new Ray(new Point(3,1,0), new Vector(1, 0, 0))),"BVA12: Ray starts after the tangent point");
-//
-//        // **** Group: Special cases
-//
-//        //BVA13: Ray's line is outside, ray is orthogonal to ray start to sphere's center line
-//        assertNull(sphere.findIntersections(new Ray(new Point(0,1,0), new Vector(0, 1, 0))),"BVA13: Ray's line is outside, ray is orthogonal to ray start to sphere's center line");
-//
-//
-//    }
+    /**
+     * Test method for {@link geometries.Sphere#findIntersections(Ray)} (primitives.Point)}.
+     */
+    @Test
+    public void testFindIntersections() {
+        Sphere sphere = new Sphere(new Point(2,0,0),1);
+        Point pnt1 = new Point(1.1339745962156,0.5,0);
+        Point pnt2 = new Point(2.8660254037844,0.5,0);
+
+
+
+        //============ Equivalence Partitions Tests ==============//
+
+        //EP1: Head of the ray is outside the sphere and intersects the sphere twice
+        assertEquals(2, sphere.findIntersections(new Ray(new Point(0, 0.5, 0), new Vector(1, 0, 0))).size(), "EP1: Wrong number of points - 2");
+        assertEquals(List.of(pnt1,pnt2), sphere.findIntersections(new Ray(new Point(0, 0.5, 0), new Vector(1, 0, 0))), "EP1: Wrong intersections");
+        //EP2: Ray doesn't intersect the sphere
+        assertNull(sphere.findIntersections(new Ray(new Point(0, 2, 0), new Vector(1, 0, 0))),"EP2: Ray's line out of sphere");
+        //EP3: Ray starts inside the sphere
+        assertEquals(1, sphere.findIntersections(new Ray(new Point(1.5, 0.5, 0), new Vector(1, 0, 0))).size(), "EP3: Wrong number of points - 1");
+        assertEquals(List.of(pnt1), sphere.findIntersections(new Ray(new Point(1.5, 0.5, 0), new Vector(-1, 0, 0))), "EP3: Wrong intersection");
+
+        //EP4: Ray starts after the sphere
+        assertNull(sphere.findIntersections(new Ray(new Point(3, 0.5, 0), new Vector(1, 0, 0))),"EP4: Ray starts after the sphere");
+
+        //============ Boundary Tests ==============//
+
+        // **** Group: Ray's line crosses the sphere (but not the center)
+
+
+        //BVA1: Ray starts at the sphere and goes inside
+        assertEquals(1, sphere.findIntersections(new Ray(pnt1, new Vector(1, 0, 0))).size(), "BVA1: Wrong number of points - 1");
+        assertEquals(List.of(pnt2), sphere.findIntersections(new Ray(pnt1, new Vector(1, 0, 0))), "BVA1: Wrong intersection");
+        //BVA2: Ray starts at the sphere and goes outside
+        assertNull(sphere.findIntersections(new Ray(pnt1, new Vector(-1, 0, 0))),"BVA2: Ray's line out of sphere");
+
+        // **** Group: Ray's line goes through the center
+
+
+        //BVA3: Ray starts before the sphere
+        assertEquals(2, sphere.findIntersections(new Ray(new Point(0.5, 0, 0), new Vector(1, 0, 0))).size(), "BVA3: Wrong number of points - 2");
+        assertEquals(List.of(new Point(1,0,0),new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(0.5, 0, 0), new Vector(1, 0, 0))), "BVA3: Wrong intersections");
+        //BVA4: Ray starts at sphere and goes inside
+        assertEquals(1, sphere.findIntersections(new Ray(new Point(1, 0, 0), new Vector(1, 0, 0))).size(), "BVA4: Wrong number of points - 1");
+        assertEquals(List.of(new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(1, 0, 0), new Vector(1, 0, 0))), "BVA4: Wrong intersection");
+        //BVA5: Ray starts at the sphere and goes outside
+        assertNull(sphere.findIntersections(new Ray(new Point(1,0,0), new Vector(-1, 0, 0))),"BVA5: Ray's line out of sphere");
+        //BVA6: Ray starts inside the sphere before the center
+        assertEquals(1, sphere.findIntersections(new Ray(new Point(1.5, 0, 0), new Vector(1, 0, 0))).size(), "BVA6: Wrong number of points - 1");
+        assertEquals(List.of(new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(1.5, 0, 0), new Vector(1, 0, 0))), "BVA6: Wrong intersection");
+        //BVA7: Ray starts inside the sphere after the center
+        assertEquals(1, sphere.findIntersections(new Ray(new Point(2.5, 0, 0), new Vector(1, 0, 0))).size(), "BVA7: Wrong number of points - 1");
+        assertEquals(List.of(new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(2.5, 0, 0), new Vector(1, 0, 0))), "BVA7: Wrong intersection");
+        //BVA8: Ray starts at the center
+        assertEquals(1, sphere.findIntersections(new Ray(new Point(2, 0, 0), new Vector(1, 0, 0))).size(), "BVA8: Wrong number of points - 1");
+        assertEquals(List.of(new Point(3,0,0)), sphere.findIntersections(new Ray(new Point(2, 0, 0), new Vector(1, 0, 0))), "BVA8: Wrong intersection");
+        //BVA9: Ray starts after the sphere
+        assertNull(sphere.findIntersections(new Ray(new Point(4,0,0), new Vector(1, 0, 0))),"BVA9: Ray's line inside of sphere");
+
+        // **** Group: Ray's line is tangent to the sphere
+
+        //BVA10: Ray starts before the tangent point
+        assertNull(sphere.findIntersections(new Ray(new Point(0,1,0), new Vector(1, 0, 0))),"BVA10: Ray starts before the tangent point");
+        //BVA11: Ray starts at the tangent point
+        assertNull(sphere.findIntersections(new Ray(new Point(2,1,0), new Vector(1, 0, 0))),"BVA11: Ray starts at the tangent point");
+        //BVA12: Ray starts after the tangent point
+        assertNull(sphere.findIntersections(new Ray(new Point(3,1,0), new Vector(1, 0, 0))),"BVA12: Ray starts after the tangent point");
+
+        // **** Group: Special cases
+
+        //BVA13: Ray's line is outside, ray is orthogonal to ray start to sphere's center line
+        assertNull(sphere.findIntersections(new Ray(new Point(0,1,0), new Vector(0, 1, 0))),"BVA13: Ray's line is outside, ray is orthogonal to ray start to sphere's center line");
+
+
+    }
 
 }
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>### IntelliJ IDEA ###\r\nout/\r\n!**/src/main/**/out/\r\n!**/src/test/**/out/\r\n\r\n### Eclipse ###\r\n.apt_generated\r\n.classpath\r\n.factorypath\r\n.project\r\n.settings\r\n.springBeans\r\n.sts4-cache\r\nbin/\r\n!**/src/main/**/bin/\r\n!**/src/test/**/bin/\r\n\r\n### NetBeans ###\r\n/nbproject/private/\r\n/nbbuild/\r\n/dist/\r\n/nbdist/\r\n/.nb-gradle/\r\n\r\n### VS Code ###\r\n.vscode/\r\n\r\n### Mac OS ###\r\n.DS_Store
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision 46ff68b0a570fda675fb8207047c05fd386d4a90)
+++ b/.gitignore	(date 1682844152436)
@@ -26,4 +26,6 @@
 .vscode/
 
 ### Mac OS ###
-.DS_Store
\ No newline at end of file
+.DS_Store
+#ignore folder#
+/images/
\ No newline at end of file
Index: unitTests/renderer/ImageWriterTestTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unitTests/renderer/ImageWriterTestTests.java b/unitTests/renderer/ImageWriterTestTests.java
new file mode 100644
--- /dev/null	(date 1682843783598)
+++ b/unitTests/renderer/ImageWriterTestTests.java	(date 1682843783598)
@@ -0,0 +1,16 @@
+package renderer;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class ImageWriterTestTests {
+
+    @Test
+    void testWriteToImage() {
+    }
+
+    @Test
+    void testWritePixel() {
+    }
+}
\ No newline at end of file
Index: src/renderer/ImageWriter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/renderer/ImageWriter.java b/src/renderer/ImageWriter.java
new file mode 100644
--- /dev/null	(date 1682845687639)
+++ b/src/renderer/ImageWriter.java	(date 1682845687639)
@@ -0,0 +1,93 @@
+package renderer;
+
+import primitives.Color;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.IOException;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+import javax.imageio.*;
+
+/**
+ * Image writer class combines accumulation of pixel color matrix and finally
+ * producing a non-optimized jpeg image from this matrix. The class although is
+ * responsible for holding image related parameters of View Plane - pixel matrix
+ * size and resolution
+ * 
+ * @author Dan
+ */
+public class ImageWriter {
+	private int nX;
+	private int nY;
+
+	private static final String FOLDER_PATH = System.getProperty("user.dir") + "/images";
+
+	private BufferedImage image;
+	private String imageName;
+	
+	private Logger logger = Logger.getLogger("ImageWriter");
+
+	// ***************** Constructors ********************** //
+	/**
+	 * Image Writer constructor accepting image name and View Plane parameters,
+	 * @param imageName the name of jpeg file
+	 * @param nX        amount of pixels by Width
+	 * @param nY        amount of pixels by height
+	 */
+	public ImageWriter(String imageName, int nX, int nY) {
+		this.imageName = imageName;
+		this.nX = nX;
+		this.nY = nY;
+
+		image = new BufferedImage(nX, nY, BufferedImage.TYPE_INT_RGB);
+	}
+
+	// ***************** Getters/Setters ********************** //
+	/**
+	 * View Plane Y axis resolution
+	 * 
+	 * @return the amount of vertical pixels
+	 */
+	public int getNy() {
+		return nY;
+	}
+
+	/**
+	 * View Plane X axis resolution
+	 * 
+	 * @return the amount of horizontal pixels
+	 */
+	public int getNx() {
+		return nX;
+	}
+
+	// ***************** Operations ******************** //
+
+	/**
+	 * Function writeToImage produces unoptimized png file of the image according to
+	 * pixel color matrix in the directory of the project
+	 */
+	public void writeToImage() {
+		try {
+			File file = new File(FOLDER_PATH + '/' + imageName + ".png");
+			ImageIO.write(image, "png", file);
+		} catch (IOException e) {
+			logger.log(Level.SEVERE, "I/O error", e);
+			throw new IllegalStateException("I/O error - may be missing directory " + FOLDER_PATH, e);
+		}
+	}
+
+	/**
+	 * The function writePixel writes a color of a specific pixel into pixel color
+	 * matrix
+	 * 
+	 * @param xIndex X axis index of the pixel
+	 * @param yIndex Y axis index of the pixel
+	 * @param color  final color of the pixel
+	 */
+	public void writePixel(int xIndex, int yIndex, Color color) {
+		image.setRGB(xIndex, yIndex, color.getColor().getRGB());
+	}
+
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"cd85df16-315c-4a3a-a242-2e29245d113c\" name=\"Changes\" comment=\"beginning of camera\">\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/uiDesigner.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/unitTests/renderer/IntegrationTest.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/primitives/Point.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/primitives/Point.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/primitives/Vector.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/primitives/Vector.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/renderer/Camera.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/renderer/Camera.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/unitTests/geometries/SphereTest.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/unitTests/geometries/SphereTest.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/unitTests/renderer/CameraTest.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/unitTests/renderer/CameraTest.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"JUnit5 Test Class\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PUSH_TAGS\">\r\n      <GitPushTagMode>\r\n        <option name=\"argument\" value=\"--tags\" />\r\n        <option name=\"title\" value=\"All\" />\r\n      </GitPushTagMode>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2OV7lVSK63W6tEIpxe8AW34Ehsg\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;true&quot;,\r\n    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit5&quot;,\r\n    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5&quot;: &quot;&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;fileTemplates&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Haim\\IdeaProjects\\ISE_5783_0586_5404\\unitTests\" />\r\n      <recent name=\"C:\\Users\\Haim\\IdeaProjects\\ISE_5783_0586_5404\\src\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.Recents.Supers\">\r\n      <recent name=\"\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.RecentsKey\">\r\n      <recent name=\"renderer\" />\r\n      <recent name=\"geometries\" />\r\n      <recent name=\"primitives\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"JUnit.SphereTest.testFindIntersections\">\r\n    <configuration name=\"CameraTest.testConstructRay\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ISE_5783_0586_5404\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"renderer.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"renderer\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"renderer.CameraTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"testConstructRay\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"IntegrationTest.cameraRayPlaneIntegration\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ISE_5783_0586_5404\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"renderer.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"renderer\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"renderer.IntegrationTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"cameraRayPlaneIntegration\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"IntegrationTest.cameraRaySphereIntegration\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ISE_5783_0586_5404\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"renderer.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"renderer\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"renderer.IntegrationTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"cameraRaySphereIntegration\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"IntegrationTest.cameraRayTriangleIntegration\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ISE_5783_0586_5404\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"renderer.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"renderer\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"renderer.IntegrationTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"cameraRayTriangleIntegration\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"SphereTest.testFindIntersections\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ISE_5783_0586_5404\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"geometries.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"geometries\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"geometries.SphereTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"testFindIntersections\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JUnit.SphereTest.testFindIntersections\" />\r\n        <item itemvalue=\"JUnit.IntegrationTest.cameraRaySphereIntegration\" />\r\n        <item itemvalue=\"JUnit.IntegrationTest.cameraRayPlaneIntegration\" />\r\n        <item itemvalue=\"JUnit.IntegrationTest.cameraRayTriangleIntegration\" />\r\n        <item itemvalue=\"JUnit.CameraTest.testConstructRay\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"cd85df16-315c-4a3a-a242-2e29245d113c\" name=\"Changes\" comment=\"\" />\r\n      <created>1681634049579</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1681634049579</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"stage 0\">\r\n      <created>1681634213332</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681634213332</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"stage 0\">\r\n      <created>1681634412653</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681634412653</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"sof sof stage 1\">\r\n      <created>1681634845568</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681634845568</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Intersectable\">\r\n      <created>1681826245666</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681826245666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"unit tests for findIntersections finished besides Tube\">\r\n      <created>1682251398631</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1682251398631</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"stage 3 tag\">\r\n      <created>1682251555241</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1682251555241</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"beginning of camera\">\r\n      <created>1682423296985</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1682423296985</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"8\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"stage 0\" />\r\n    <MESSAGE value=\"sof sof stage 1\" />\r\n    <MESSAGE value=\"Intersectable\" />\r\n    <MESSAGE value=\"unit tests for findIntersections finished besides Tube\" />\r\n    <MESSAGE value=\"stage 3 tag\" />\r\n    <MESSAGE value=\"beginning of camera\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"beginning of camera\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 46ff68b0a570fda675fb8207047c05fd386d4a90)
+++ b/.idea/workspace.xml	(date 1682881367935)
@@ -5,14 +5,13 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="cd85df16-315c-4a3a-a242-2e29245d113c" name="Changes" comment="beginning of camera">
-      <change afterPath="$PROJECT_DIR$/.idea/uiDesigner.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/unitTests/renderer/IntegrationTest.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/primitives/Color.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/renderer/ImageWriter.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/unitTests/renderer/ImageWriterTestTests.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/primitives/Point.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/primitives/Point.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/primitives/Vector.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/primitives/Vector.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/renderer/Camera.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/renderer/Camera.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/geometries/Sphere.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/geometries/Sphere.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/unitTests/geometries/SphereTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/unitTests/geometries/SphereTest.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/unitTests/renderer/CameraTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/unitTests/renderer/CameraTest.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -23,8 +22,8 @@
     <option name="RECENT_TEMPLATES">
       <list>
         <option value="Interface" />
-        <option value="JUnit5 Test Class" />
         <option value="Class" />
+        <option value="JUnit5 Test Class" />
       </list>
     </option>
   </component>
@@ -48,24 +47,29 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
-    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;true&quot;,
-    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,
-    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,
-    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit5&quot;,
-    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5&quot;: &quot;&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;fileTemplates&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "ASKED_ADD_EXTERNAL_FILES": "true",
+    "Downloaded.Files.Path.Enabled": "true",
+    "Repository.Attach.Annotations": "false",
+    "Repository.Attach.JavaDocs": "false",
+    "Repository.Attach.Sources": "false",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary": "JUnit5",
+    "com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5": "",
+    "last_opened_file_path": "C:/Users/Haim/IdeaProjects/ISE_5783_0586_5404/unitTests/renderer",
+    "project.structure.last.edited": "Modules",
+    "project.structure.proportion": "0.15",
+    "project.structure.side.proportion": "0.2",
+    "settings.editor.selected.configurable": "fileTemplates"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\Users\Haim\IdeaProjects\ISE_5783_0586_5404\unitTests\renderer" />
+      <recent name="C:\Users\Haim\IdeaProjects\ISE_5783_0586_5404\src\primitives" />
+    </key>
     <key name="MoveFile.RECENT_KEYS">
       <recent name="C:\Users\Haim\IdeaProjects\ISE_5783_0586_5404\unitTests" />
       <recent name="C:\Users\Haim\IdeaProjects\ISE_5783_0586_5404\src" />
@@ -73,13 +77,16 @@
     <key name="CreateTestDialog.Recents.Supers">
       <recent name="" />
     </key>
+    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
+      <recent name="renderer" />
+    </key>
     <key name="CreateTestDialog.RecentsKey">
       <recent name="renderer" />
       <recent name="geometries" />
       <recent name="primitives" />
     </key>
   </component>
-  <component name="RunManager" selected="JUnit.SphereTest.testFindIntersections">
+  <component name="RunManager" selected="JUnit.IntegrationTest.cameraRaySphereIntegration">
     <configuration name="CameraTest.testConstructRay" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ISE_5783_0586_5404" />
       <extension name="coverage">
@@ -162,8 +169,8 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="JUnit.IntegrationTest.cameraRaySphereIntegration" />
         <item itemvalue="JUnit.SphereTest.testFindIntersections" />
-        <item itemvalue="JUnit.IntegrationTest.cameraRaySphereIntegration" />
         <item itemvalue="JUnit.IntegrationTest.cameraRayPlaneIntegration" />
         <item itemvalue="JUnit.IntegrationTest.cameraRayTriangleIntegration" />
         <item itemvalue="JUnit.CameraTest.testConstructRay" />
Index: src/primitives/Color.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/primitives/Color.java b/src/primitives/Color.java
new file mode 100644
--- /dev/null	(date 1682843593829)
+++ b/src/primitives/Color.java	(date 1682843593829)
@@ -0,0 +1,107 @@
+package primitives;
+
+/** Wrapper class for java.jwt.Color The constructors operate with any
+ * non-negative RGB values. The colors are maintained without upper limit of
+ * 255. Some additional operations are added that are useful for manipulating
+ * light's colors
+ * @author Dan Zilberstein */
+public class Color {
+   /** The internal fields maintain RGB components as double numbers from 0 to
+    * whatever... */
+   private final Double3     rgb;
+
+   /** Black color = (0,0,0) */
+   public static final Color BLACK = new Color();
+
+   /** Default constructor - to generate Black Color (privately) */
+   private Color() { rgb = Double3.ZERO; }
+
+   /** Constructor to generate a color according to RGB components Each component
+    * in
+    * range 0..255 (for printed white color) or more [for lights]
+    * @param r Red component
+    * @param g Green component
+    * @param b Blue component */
+   public Color(double r, double g, double b) {
+      if (r < 0 || g < 0 || b < 0) throw new IllegalArgumentException("Negative color component is illegal");
+      rgb = new Double3(r, g, b);
+   }
+
+   /** Constructor to generate a color according to RGB components Each component
+    * in
+    * range 0..255 (for printed white color) or more [for lights]
+    * @param rgb triad of Red/Green/Blue components */
+   private Color(Double3 rgb) {
+      if (rgb.d1 < 0 || rgb.d2 < 0 || rgb.d3 < 0)
+         throw new IllegalArgumentException("Negative color component is illegal");
+      this.rgb = rgb;
+   }
+
+   /** Constructor on base of java.awt.Color object
+    * @param other java.awt.Color's source object */
+   public Color(java.awt.Color other) {
+      rgb = new Double3(other.getRed(), other.getGreen(), other.getBlue());
+   }
+
+   /** Color getter - returns the color after converting it into java.awt.Color
+    * object During the conversion any component bigger than 255 is set to 255
+    * @return java.awt.Color object based on this Color RGB components */
+   public java.awt.Color getColor() {
+      int ir = (int) rgb.d1;
+      int ig = (int) rgb.d2;
+      int ib = (int) rgb.d3;
+      return new java.awt.Color(ir > 255 ? 255 : ir, ig > 255 ? 255 : ig, ib > 255 ? 255 : ib);
+   }
+
+   /** Operation of adding this and one or more other colors (by component)
+    * @param  colors one or more other colors to add
+    * @return        new Color object which is a result of the operation */
+   public Color add(Color... colors) {
+      double rr = rgb.d1;
+      double rg = rgb.d2;
+      double rb = rgb.d3;
+      for (Color c : colors) {
+         rr += c.rgb.d1;
+         rg += c.rgb.d2;
+         rb += c.rgb.d3;
+      }
+      return new Color(rr, rg, rb);
+   }
+
+   /** Scale the color by a scalar triad per rgb
+    * @param  k scale factor per rgb
+    * @return   new Color object which is the result of the operation */
+   public Color scale(Double3 k) {
+      if (k.d1 < 0.0 || k.d2 < 0.0 || k.d3 < 0.0)
+         throw new IllegalArgumentException("Can't scale a color by a negative number");
+      return new Color(rgb.product(k));
+   }
+
+   /** Scale the color by a scalar
+    * @param  k scale factor
+    * @return   new Color object which is the result of the operation */
+   public Color scale(double k) {
+      if (k < 0.0) throw new IllegalArgumentException("Can't scale a color by a negative number");
+      return new Color(rgb.scale(k));
+   }
+
+   /** Scale the color by (1 / reduction factor)
+    * @param  k reduction factor
+    * @return   new Color object which is the result of the operation */
+   public Color reduce(double k) {
+      if (k < 1) throw new IllegalArgumentException("Can't scale a color by a by a number lower than 1");
+      return new Color(rgb.reduce(k));
+   }
+
+   /** Scale the color by (1 / reduction factor)
+    * @param  k reduction factor
+    * @return   new Color object which is the result of the operation */
+   public Color reduce(Double3 k) {
+      if (k.d1 < 1.0 || k.d2 < 1.0 || k.d3 < 1.0)
+         throw new IllegalArgumentException("Can't scale a color by a by a number lower than 1");
+      return new Color(rgb.d1 / k.d1, rgb.d2 / k.d2, rgb.d3 / k.d3);
+   }
+
+   @Override
+   public String toString() { return "rgb:" + rgb; }
+}
